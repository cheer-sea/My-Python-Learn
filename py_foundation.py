'''
    这个源文件，尝试 py 的基础语法和变量类型
'''
### 变量类型
## 常用
# str （字符串,使用单引号或双引号,当为f字符串时,使用大括号可以引用其他变量）
str_1 = 'A try'
str_2 = f'{str_1}, then, a new try'
# int or float （数字）
num_1 = 10
num_2 = 1.54
# bool （布尔值）
bool_1 = True
bool_2 = False
# set （集合,使用大括号,无序不重复元素）
set_1 = {1, 2, 3}
# tuple (元组,使用小括号,有序不重复元素)
tuple_1 = (1, 2, 3)
# list (列表,使用方括号,有序可重复元素)
list_1 = [1, 2, 3, 3, 4, 5]
# dict (字典,使用花括号,无序不重复键值对)
dict_1= {'name': 'Alice', 'age': 20}

## 转义字符
# \n 换行 
# \t 制表符 

### 语法
## 基本运算
# + - * /
# % 取余
# ** 乘方
# // 整除

## 检查某变量是否在集合 or 元组 or 列表,使用 in 关键字
# 2 in set_1
# 2 in tuple_1
# 2 in list_1

## 列表切片
list_2 = ['a', 'b', 'd', 'f', 'g', 'h', 'j', 'k', 'l']
print(list_2[ : : 2]) # 步长为2
print(list_2[2: -2: 3]) # 切片,去除第2个元素及以前,倒数第2个元素及以后的所有元素,之后步长为3

list_2 + ['1'] # 列表拼接,将'1'添加到list_2的末尾,注意中括号

# 通过循环读取列表
for i in list_2:
    print(i)
print('遍历结束')

# 函数接收任意参数
# def my_func(name, age, *args)：
# 前两个位置参数,按顺序传入,后面任意个参数,这里的 * 号表示的变量会按元组的形式接收

# def func_2(name, age, **kwargs)：
# 此时 ** 号表示的变量会按字典的形式接收。注意，这里接收的形式必须是键值对形式！
